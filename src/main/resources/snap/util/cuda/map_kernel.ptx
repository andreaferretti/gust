	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /Developer/NVIDIA/CUDA-5.5/bin/../open64/lib//be
	// nvopencc 4.1 built on 2013-09-05

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_000181c8_00000000-9_${name}.cpp3.i (/var/folders/7b/9vkq1bmj1t9_4wydy5wvzt6m0000gn/T/ccBI#.eZLPY7)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"/tmp/tmpxft_000181c8_00000000-8_${name}.cudafe2.gpu"
	.file	2	"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/5.0/include/stddef.h"
	.file	3	"/Developer/NVIDIA/CUDA-5.5/bin/../include/crt/device_runtime.h"
	.file	4	"/Developer/NVIDIA/CUDA-5.5/bin/../include/host_defines.h"
	.file	5	"/Developer/NVIDIA/CUDA-5.5/bin/../include/builtin_types.h"
	.file	6	"/Developer/NVIDIA/CUDA-5.5/bin/../include/device_types.h"
	.file	7	"/Developer/NVIDIA/CUDA-5.5/bin/../include/driver_types.h"
	.file	8	"/Developer/NVIDIA/CUDA-5.5/bin/../include/surface_types.h"
	.file	9	"/Developer/NVIDIA/CUDA-5.5/bin/../include/texture_types.h"
	.file	10	"/Developer/NVIDIA/CUDA-5.5/bin/../include/vector_types.h"
	.file	11	"/Developer/NVIDIA/CUDA-5.5/bin/../include/device_launch_parameters.h"
	.file	12	"/Developer/NVIDIA/CUDA-5.5/bin/../include/crt/storage_class.h"
	.file	13	"${name}.cu"
	.file	14	"/Developer/NVIDIA/CUDA-5.5/bin/../include/common_functions.h"
	.file	15	"/Developer/NVIDIA/CUDA-5.5/bin/../include/math_functions.h"
	.file	16	"/Developer/NVIDIA/CUDA-5.5/bin/../include/math_constants.h"
	.file	17	"/Developer/NVIDIA/CUDA-5.5/bin/../include/device_functions.h"
	.file	18	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_11_atomic_functions.h"
	.file	19	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_12_atomic_functions.h"
	.file	20	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_13_double_functions.h"
	.file	21	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_20_atomic_functions.h"
	.file	22	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_32_atomic_functions.h"
	.file	23	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_35_atomic_functions.h"
	.file	24	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_20_intrinsics.h"
	.file	25	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_30_intrinsics.h"
	.file	26	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_32_intrinsics.h"
	.file	27	"/Developer/NVIDIA/CUDA-5.5/bin/../include/sm_35_intrinsics.h"
	.file	28	"/Developer/NVIDIA/CUDA-5.5/bin/../include/surface_functions.h"
	.file	29	"/Developer/NVIDIA/CUDA-5.5/bin/../include/texture_fetch_functions.h"
	.file	30	"/Developer/NVIDIA/CUDA-5.5/bin/../include/texture_indirect_functions.h"
	.file	31	"/Developer/NVIDIA/CUDA-5.5/bin/../include/surface_indirect_functions.h"
	.file	32	"/Developer/NVIDIA/CUDA-5.5/bin/../include/math_functions_dbl_ptx1.h"


	.entry ${name} (
		.param .u64 __cudaparm_${name}_A,
		.param .s32 __cudaparm_${name}_numElements,
		.param .u64 __cudaparm_${name}_C)
	{
	.reg .u16 %rh<4>;
	.reg .u32 %r<6>;
	.reg .u64 %rd<8>;
	.reg .f32 %f<6>;
	.reg .pred %p<3>;
	.loc	13	33	0
 //  29   * Computes the vector addition of A and B into C. The 3 vectors have the same
 //  30   * number of elements numElements.
 //  31   */
 //  32  __global__ void
 //  33  ${name}(const float *A, int numElements, float * C)
$LDWbegin_${name}:
	mov.u16 	%rh1, %ctaid.x;
	mov.u16 	%rh2, %ntid.x;
	mul.wide.u16 	%r1, %rh1, %rh2;
	cvt.u32.u16 	%r2, %tid.x;
	add.u32 	%r3, %r2, %r1;
	ld.param.s32 	%r4, [__cudaparm_${name}_numElements];
	setp.le.s32 	%p1, %r4, %r3;
	@%p1 bra 	$Lt_0_1026;
	.loc	13	39	0
 //  35      int i = blockDim.x * blockIdx.x + threadIdx.x;
 //  36
 //  37      if (i < numElements)
 //  38      {
 //  39          C[i] = __expf(A[i]);
	cvt.s64.s32 	%rd1, %r3;
	mul.wide.s32 	%rd2, %r3, 4;
	ld.param.u64 	%rd3, [__cudaparm_${name}_A];
	add.u64 	%rd4, %rd3, %rd2;
	ld.global.f32 	%f1, [%rd4+0];
	${operation}
	// mov.f32 	%f2, 0f3fb8aa3b;     	// 1.4427
	// mul.f32 	%f3, %f1, %f2;
	// ex2.approx.f32 	%f4, %f3;
	ld.param.u64 	%rd5, [__cudaparm_${name}_C];
	add.u64 	%rd6, %rd5, %rd2;
	st.global.f32 	[%rd6+0], %f4;
$Lt_0_1026:
	.loc	13	41	0
 //  40      }
 //  41  }
	exit;
$LDWend_${name}:
	} // ${name}

